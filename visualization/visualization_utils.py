import process_features 
import pandas as pd
import utils
import xgboost as xgb

# load model
xgb_onconpc = xgb.Booster()
xgb_onconpc.load_model('../model/xgboost_model.json')

# Specify cancer types to consider
cancer_types_to_consider = ['Acute Myeloid Leukemia', 'Bladder Urothelial Carcinoma', 'Cholangiocarcinoma',
                            'Colorectal Adenocarcinoma', 'Diffuse Glioma', 'Endometrial Carcinoma',
                            'Esophagogastric Adenocarcinoma', 'Gastrointestinal Neuroendocrine Tumors', 'Gastrointestinal Stromal Tumor',
                            'Head and Neck Squamous Cell Carcinoma', 'Invasive Breast Carcinoma', 'Melanoma', 'Meningothelial Tumor',
                            'Non-Hodgkin Lymphoma', 'Non-Small Cell Lung Cancer', 'Ovarian Epithelial Tumor', 'Pancreatic Adenocarcinoma',
                            'Pancreatic Neuroendocrine Tumor', 'Pleural Mesothelioma', 'Prostate Adenocarcinoma', 'Renal Cell Carcinoma',
                            'Well-Differentiated Thyroid Cancer']


onconpc_processed_cups_df = pd.read_csv('../data/onconpc_processed_cups_data.csv')
all_features = onconpc_processed_cups_df.columns.to_list()

all_features= ['BRAF',
 'KCNQ1',
 'IGF1R',
 'GNAS',
 'BCL2L1',
 'NTRK3_mut',
 'SLX1B',
 'NKX2-1',
 'RAD51D_mut',
 'NEGR1_mut',
 'FLT3',
 'SDHB_mut',
 'ESR1',
 'SETD2',
 'NTRK2',
 'RAD51C',
 'CDK6_mut',
 'RHBDF2',
 'ZNF217',
 'ALOX12B_mut',
 'NPM1_mut',
 'AKT2_mut',
 'ROS1_mut',
 'GATA2_mut',
 'RAD51D',
 'GBA',
 'BABAM1',
 'TMEM127',
 'PMS2_mut',
 'B2M',
 'STAT6_mut',
 'CBFB',
 'FLT1_mut',
 'BCL2',
 'PRKCI',
 'TSC1_mut',
 'SBS85',
 'MFSD11_mut',
 'NSD1_mut',
 'BCL6_mut',
 'SOX9',
 'MAP2K4_mut',
 'SBS42',
 'ZNF708',
 'XPO1',
 'CBFA2T3',
 'AURKB_mut',
 'XRCC2',
 'ATM',
 'RPL26',
 'STAT6',
 'HFE',
 'PIK3R1_mut',
 'PPARG_mut',
 'TET2_mut',
 'MTOR',
 'SBDS',
 'TP53BP1',
 'IGF2',
 'ARHGEF12',
 'SH2B3_mut',
 'CCND3',
 'PPM1D_mut',
 'RECQL4',
 'SBS29',
 'WT1',
 'CYLD',
 'PHF6_mut',
 'CDK6',
 'CUX1_mut',
 'LMO1_mut',
 'CBFB_mut',
 'RNF43_mut',
 'VHL_mut',
 'BCL6',
 'LMO3',
 'CDKN2C_mut',
 'MUS81',
 'ASXL1_mut',
 'KDR',
 'MDM2',
 'MCL1',
 'RUNX1T1',
 'MBD4',
 'RAC1',
 'KDM5C_mut',
 'MDM2_mut',
 'MCM8',
 'FOXA1_mut',
 'FLT4_mut',
 'BABAM1_mut',
 'RPTOR_mut',
 'WRN_mut',
 'FANCC',
 'SMAD4_mut',
 'RSPO2',
 'SUZ12_mut',
 'KAT6B',
 'JAK2_mut',
 'RAD50_mut',
 'FANCM',
 'ARID2',
 'RHEB',
 'BCL11B',
 'CDKN2C',
 'DDB1',
 'ROS1',
 'IGF2_mut',
 'FANCG_mut',
 'GENDER',
 'PIM1',
 'SMO',
 'B2M_mut',
 'HRAS',
 'ERCC2_mut',
 'CRKL',
 'AKT3',
 'SBS84',
 'NFKBIZ',
 'ERBB3',
 'POT1',
 'SBS13',
 'FANCE_mut',
 'SOX2',
 'RAF1',
 'KIT',
 'GNAQ_mut',
 'FKBP9',
 'SMC1A_mut',
 'RHOA_mut',
 'IL7R_mut',
 'CIC',
 'MITF_mut',
 'TRAF3_mut',
 'IL7R',
 'NKX2-1_mut',
 'GLI2_mut',
 'H3F3B',
 'OGG1',
 'SMARCA4_mut',
 'DEPDC5',
 'NEGR1',
 'TET1_mut',
 'CHEK2_mut',
 'JAZF1_mut',
 'ERCC4_mut',
 'TFE3_mut',
 'PDGFB_mut',
 'SPOP_mut',
 'DNMT3A',
 'TCF7L1',
 'KDM6A_mut',
 'NTHL1_mut',
 'GLI1_mut',
 'PMS1_mut',
 'KMT2A',
 'PRF1',
 'TP53',
 'MYC',
 'ERCC3_mut',
 'CD79B',
 'CDKN1A_mut',
 'HRAS_mut',
 'SOX2_mut',
 'KMT2D',
 'CDC73_mut',
 'RHOT1',
 'NFKBIA',
 'EZH2_mut',
 'EXO1',
 'BCORL1_mut',
 'REL',
 'SMAD2',
 'ERCC2',
 'SUFU',
 'PHOX2B_mut',
 'KLF4',
 'CDKN2A_mut',
 'GLI3',
 'FH_mut',
 'EGLN1',
 'IKZF3_mut',
 'CRTC2',
 'GATA6_mut',
 'DIS3L2',
 'MAX',
 'CCNE1',
 'SMAD4',
 'WHSC1L1_mut',
 'STAT3',
 'GATA4',
 'BARD1',
 'SLC34A2',
 'KLF4_mut',
 'MRE11A',
 'SLX4_mut',
 'CDKN1A',
 'PRPF40B',
 'CDK8',
 'SRC_mut',
 'EPHA7_mut',
 'SLX4',
 'FANCC_mut',
 'SF1',
 'FAM46C',
 'PDGFRB',
 'RELA_mut',
 'CARD11',
 'CASP8_mut',
 'TDG',
 'PRKAR1A',
 'SBS7a',
 'BCL2L1_mut',
 'SETBP1_mut',
 'DICER1',
 'ERCC5_mut',
 'WT1_mut',
 'TSHR_mut',
 'XPO1_mut',
 'PSMD13',
 'MAFB',
 'KAT6A',
 'FAT1_mut',
 'FAM46C_mut',
 'EPHA7',
 'SBS21',
 'MLH3_mut',
 'GREM1',
 'PDGFRA',
 'CDK12_mut',
 'GLI1',
 'SETD2_mut',
 'SBS35',
 'SDHC',
 'CEBPA_mut',
 'YAP1_mut',
 'BCOR_mut',
 'RSPO3',
 'SOCS1_mut',
 'SH2B3',
 'ERBB2',
 'CSF1R',
 'MRE11A_mut',
 'EPHA5_mut',
 'ARAF',
 'ERCC3',
 'VEGFA_mut',
 'CDKN2A',
 'PTPN14',
 'CSF3R',
 'SBS17b',
 'SBS8',
 'DMC1',
 'BARD1_mut',
 'SETBP1',
 'PMS1',
 'MGA',
 'FGFR1',
 'NEIL2',
 'ACVR1_mut',
 'FANCA',
 'SS18_mut',
 'TSHR',
 'NTRK1',
 'WHSC1L1',
 'SYK_mut',
 'SDHD',
 'MEF2B',
 'PTK2B_mut',
 'EPHA5',
 'RHOH',
 'TMEM127_mut',
 'SBS22',
 'CDK2',
 'CDKN1C',
 'UBE2T',
 'CSF3R_mut',
 'BRIP1',
 'AXL_mut',
 'RAD51_mut',
 'TET2',
 'TLR4_mut',
 'SBS28',
 'NBN',
 'MAF',
 'TSC2',
 'H3F3A_mut',
 'IKZF3',
 'NF2',
 'NFE2L2_mut',
 'ARID1A_mut',
 'BRCC3',
 'BIRC3_mut',
 'NRG1',
 'KRAS_mut',
 'NBN_mut',
 'EPCAM',
 'TOPBP1',
 'CBL_mut',
 'PRDM1_mut',
 'RARA',
 'ESR1_mut',
 'PTK2B',
 'SBS36',
 'RFWD2_mut',
 'ERCC5',
 'DIS3_mut',
 'POT1_mut',
 'RUNX1',
 'ERBB3_mut',
 'SBS40',
 'BAP1_mut',
 'TNFAIP3',
 'NFKBIE_mut',
 'QKI_mut',
 'CDKN1B_mut',
 'TRAF7_mut',
 'RINT1',
 'ARAF_mut',
 'ID3',
 'SBS15',
 'PIK3CA_mut',
 'APC_mut',
 'XRCC6',
 'SBS20',
 'RIT1',
 'ARID1A',
 'ENG',
 'MAP2K2_mut',
 'RET',
 'SPOP',
 'CHEK2',
 'NPM1',
 'FGFR4_mut',
 'KDM5A_mut',
 'NEIL1',
 'CBL',
 'CTNNA1',
 'CTCF',
 'TCEB1_mut',
 'PHF6',
 'SNAPC5_mut',
 'KDM6B',
 'MUTYH',
 'EXT2',
 'BRE',
 'TFE3',
 'SBS44',
 'WHSC1_mut',
 'FAH',
 'LIG4',
 'PRKDC_mut',
 'FLT1',
 'KAT6A_mut',
 'BRD3',
 'STAG2',
 'SBS30',
 'FGFR2_mut',
 'TRAF7',
 'PTCH1_mut',
 'KIT_mut',
 'SBS11',
 'SF3B1',
 'ARID2_mut',
 'SBS9',
 'YAP1',
 'KMT2D_mut',
 'RET_mut',
 'DAXX',
 'BMPR1A',
 'MTA1',
 'WAS',
 'MED12',
 'TCF7L2_mut',
 'XPA',
 'FANCI',
 'ERCC4',
 'AKT3_mut',
 'ERCC1',
 'EXT1',
 'FLCN',
 'SBS18',
 'SBS7d',
 'SUZ12',
 'GNAQ',
 'PALB2',
 'SLC25A13',
 'FH',
 'HIST1H3B',
 'SMC3',
 'RB1_mut',
 'MED12_mut',
 'SDHA_mut',
 'BRD4_mut',
 'ATRX_mut',
 'NF2_mut',
 'PIK3C2B',
 'POLD1',
 'HIST1H3C_mut',
 'KEAP1',
 'EWSR1',
 'LMO2',
 'ZRSR2_mut',
 'CDC73',
 'USP8',
 'TSC2_mut',
 'RAD21',
 'PPM1D',
 'CRKL_mut',
 'DCLRE1C',
 'CDK5',
 'XRCC5',
 'ETV5',
 'POLQ_mut',
 'ALOX12B',
 'GATA3_mut',
 'SBS86',
 'FLCN_mut',
 'PNKP',
 'GATA2',
 'PBRM1',
 'MLH3',
 'UROD',
 'POLE_mut',
 'MYB',
 'CDH1',
 'ETV4',
 'FANCF_mut',
 'KDM5A',
 'ETV6_mut',
 'SQSTM1',
 'SDHC_mut',
 'JAK1_mut',
 'XRCC1',
 'BAP1',
 'RIF1',
 'FANCD2',
 'PRSS1',
 'PBRM1_mut',
 'CEBPA',
 'MGA_mut',
 'PALB2_mut',
 'PIK3R1',
 'RHOA',
 'BRCA1_mut',
 'GNA11',
 'ABL1_mut',
 'MCL1_mut',
 'PIK3C2B_mut',
 'RECQL4_mut',
 'U2AF1_mut',
 'NOTCH1',
 'SBS41',
 'ABL1',
 'SLX1A',
 'PHOX2B',
 'SMAD2_mut',
 'PDGFRB_mut',
 'BRCA1',
 'SBS38',
 'PTCH1',
 'ZNF217_mut',
 'PRKAR1A_mut',
 'CDK12',
 'ETV6',
 'PTK2',
 'PTPRD_mut',
 'ZNRF3',
 'FGFR3_mut',
 'IKZF1',
 'RICTOR_mut',
 'BLM',
 'CREBBP',
 'TNFAIP3_mut',
 'NFKBIE',
 'CTCF_mut',
 'HELQ',
 'HOXB13_mut',
 'SBS88',
 'BCL2L12',
 'BMPR1A_mut',
 'CCND3_mut',
 'INSRR_mut',
 'MYC_mut',
 'SOX9_mut',
 'NFE2L2',
 'FUS',
 'FGFR3',
 'CTLA4',
 'FANCE',
 'SYK',
 'SMC1A',
 'NKX3-1_mut',
 'HMBS',
 'MAP2K1_mut',
 'MAP2K4',
 'RSPO2_mut',
 'IDH1_mut',
 'CDH1_mut',
 'RASA1_mut',
 'SMARCE1',
 'MECOM',
 'PIM1_mut',
 'NOTCH1_mut',
 'GATA6',
 'AURKB',
 'JAK1',
 'CD274',
 'AXL',
 'DDR2',
 'CTLA4_mut',
 'MYBL1_mut',
 'NKX3-1',
 'POLQ',
 'IGF1R_mut',
 'CCNE1_mut',
 'ARHGAP35',
 'FAS',
 'XRCC4',
 'CD274_mut',
 'AURKA_mut',
 'ID3_mut',
 'JAK3_mut',
 'REL_mut',
 'SLITRK6',
 'FANCB',
 'FAN1',
 'PPARG',
 'DDR2_mut',
 'CALR_mut',
 'FGFR1_mut',
 'PRKCI_mut',
 'CTNNB1',
 'MYD88',
 'MAP2K2',
 'PAXIP1',
 'RAD51C_mut',
 'KRAS',
 'TAL1',
 'SBS5',
 'COL7A1',
 'CBLB_mut',
 'CXCR4',
 'CCND2_mut',
 'SDHD_mut',
 'EME1',
 'TET1',
 'RPTOR',
 'SMARCB1',
 'EP300',
 'SMO_mut',
 'CDKN1B',
 'AXIN2',
 'MAX_mut',
 'EPHA3',
 'BRIP1_mut',
 'CDK8_mut',
 'ALK',
 'BCL2_mut',
 'TRAF3',
 'GSTM5',
 'CUX1',
 'FGFR2',
 'NOTCH2_mut',
 'SMC3_mut',
 'MYCL',
 'DMD',
 'KLF2',
 'SOS1',
 'STK11_mut',
 'FAT1',
 'RAD21_mut',
 'FLT4',
 'FAS_mut',
 'NTRK3',
 'SBS10a',
 'IDH2_mut',
 'CD58',
 'ERCC1_mut',
 'TCEB1',
 'KDM6A',
 'PNRC1_mut',
 'PTPN11',
 'BUB1B',
 'MAPK1_mut',
 'NF1_mut',
 'SERPINA1',
 'RFWD2',
 'ERBB4_mut',
 'RAD52',
 'WRN',
 'JAK3',
 'TERT',
 'FANCL',
 'MITF',
 'POLD1_mut',
 'FUS_mut',
 'FAM175A',
 'PNRC1',
 'CDKN2B',
 'HNF1A_mut',
 'NRAS',
 'ETV1',
 'SBS12',
 'EP300_mut',
 'JAK2',
 'SBS39',
 'MET',
 'MSH6_mut',
 'MYCN_mut',
 'GALNT12',
 'MUTYH_mut',
 'MAP3K1_mut',
 'SOS1_mut',
 'FANCG',
 'SBS23',
 'DICER1_mut',
 'SBS4',
 'CRLF2_mut',
 'MEF2B_mut',
 'PARK2_mut',
 'IDH1',
 'FANCD2_mut',
 'H3F3B_mut',
 'BRCA2_mut',
 'RNF43',
 'MPL',
 'SF3B1_mut',
 'RBM10_mut',
 'PML',
 'PDCD1LG2',
 'ATR_mut',
 'BCORL1',
 'CRTC1',
 'PAX5',
 'SBS87',
 'KMT2A_mut',
 'XPC',
 'MAP3K1',
 'SBS24',
 'ARID1B_mut',
 'SBS31',
 'NPRL2',
 'FLT3_mut',
 'RELA',
 'SRSF2_mut',
 'EPCAM_mut',
 'ATRX',
 'XRCC3',
 'SS18',
 'TMPRSS2_mut',
 'RAC1_mut',
 'RUNX1T1_mut',
 'RPA1',
 'EGFR',
 'QKI',
 'ETV1_mut',
 'DOCK8',
 'CDK4_mut',
 'SBS90',
 'SBS25',
 'KDR_mut',
 'NTRK2_mut',
 'SLITRK6_mut',
 'PPP2R1A',
 'ERG',
 'MYBL1',
 'GNAS_mut',
 'FBXW7',
 'JAZF1',
 'PAX5_mut',
 'AGE',
 'STAT3_mut',
 'PTEN_mut',
 'CHEK1',
 'SBS3',
 'HIST1H3B_mut',
 'CHEK1_mut',
 'ABCB11',
 'CREBBP_mut',
 'NFKBIA_mut',
 'RUNX1_mut',
 'USP28',
 'TCF3_mut',
 'SBS17a',
 'MYD88_mut',
 'ERBB4',
 'POLH',
 'CIC_mut',
 'SRSF2',
 'RNF8',
 'ARHGAP35_mut',
 'TERT_mut',
 'FOXA1',
 'RAD50',
 'FBXW7_mut',
 'ERG_mut',
 'APC',
 'CARD11_mut',
 'PRPF8',
 'KEAP1_mut',
 'MET_mut',
 'HABP2',
 'AKT1_mut',
 'CDK9',
 'SDCCAG8_mut',
 'GLI2',
 'BRCA2',
 'ITK',
 'WHSC1',
 'TAL2',
 'NF1',
 'MDM4',
 'MLH1_mut',
 'CCND1_mut',
 'XRCC2_mut',
 'RBBP8',
 'DAXX_mut',
 'FGFR4',
 'INSIG1',
 'AKT2',
 'MDM4_mut',
 'TCF7L2',
 'CDK4',
 'RAF1_mut',
 'CADM2',
 'CD79B_mut',
 'BCOR',
 'MTAP',
 'STAG2_mut',
 'NSD1',
 'NR0B1',
 'MAPK1',
 'PTPN11_mut',
 'CCND2',
 'ERBB2_mut',
 'MAP2K1',
 'U2AF1',
 'CTNNA1_mut',
 'TRIM37',
 'SBS89',
 'BRD4',
 'MEN1_mut',
 'EED_mut',
 'GATA3',
 'BRAF_mut',
 'RAD52_mut',
 'NRAS_mut',
 'KLLN',
 'PMS2',
 'NUTM1_mut',
 'GATA4_mut',
 'MSH2_mut',
 'CALR',
 'DNMT3A_mut',
 'ACVR1',
 'LMO1',
 'SBS7b',
 'PRAME',
 'LINC00894',
 'GPC3',
 'MYB_mut',
 'ERCC6',
 'VHL',
 'GNA11_mut',
 'RAD54B',
 'SBS19',
 'TSC1',
 'TOE1_mut',
 'NOTCH3_mut',
 'PRKCZ',
 'SBS1',
 'NTHL1',
 'RICTOR',
 'RIT1_mut',
 'GPC3_mut',
 'NT5C2',
 'DDB2',
 'SOCS1',
 'PRKDC',
 'NTRK1_mut',
 'FANCA_mut',
 'UIMC1',
 'POLB',
 'SBS2',
 'RBL2',
 'PTPRD',
 'KIF1B',
 'TP53BP1_mut',
 'SBS7c',
 'FAM175A_mut',
 'NT5C2_mut',
 'SBS32',
 'POLE',
 'MPL_mut',
 'SH2D1A_mut',
 'EWSR1_mut',
 'MYCL_mut',
 'EZH2',
 'MSH2',
 'TCF3',
 'PVRL4',
 'KDM5C',
 'RASA1',
 'FOXO1_mut',
 'CRLF2',
 'DIS3',
 'PRDM1',
 'AKT1',
 'SBS37',
 'SMARCA4',
 'NOTCH3',
 'ATM_mut',
 'NOTCH2',
 'HNF1A',
 'PIK3CA',
 'CSF1R_mut',
 'SDHA',
 'YWHAE_mut',
 'CDK1',
 'BLM_mut',
 'ARID1B',
 'CDH4',
 'TMPRSS2',
 'EPHA3_mut',
 'MYCN',
 'RHEB_mut',
 'VEGFA',
 'SBS34',
 'TP53_mut',
 'PPP2R1A_mut',
 'SBS6',
 'CIITA',
 'SBS10b',
 'WWTR1_mut',
 'AURKA',
 'AR_mut',
 'ID4',
 'RSPO3_mut',
 'MEN1',
 'SMARCB1_mut',
 'FANCF',
 'TAZ',
 'H3F3A',
 'EGFR_mut',
 'RB1',
 'SUFU_mut',
 'HIST1H3C',
 'PDCD1LG2_mut',
 'MLH1',
 'SDHB',
 'RHPN2',
 'NCOA2_mut',
 'ASXL1',
 'MSH6',
 'ELANE',
 'H19',
 'NPRL3',
 'AXIN2_mut',
 'TLR4',
 'STK11',
 'CASP8',
 'IKZF1_mut',
 'MTOR_mut',
 'SH2D1A',
 'RBM10',
 'GREM1_mut',
 'CTNNB1_mut',
 'EED',
 'PTEN',
 'ATR',
 'BCL2L12_mut',
 'STAG1',
 'KCNIP1',
 'SBS16',
 'TLX3',
 'SDHAF2',
 'ALK_mut',
 'FOXL2',
 'CYLD_mut',
 'SDHAF2_mut',
 'CCND1',
 'PDGFRA_mut',
 'GEN1',
 'NEIL3',
 'PARK2',
 'RARA_mut',
 'SBS26',
 'FOXL2_mut',
 'DKC1',
 'CDKN2B_mut',
 'SRC',
 'CXCR4_mut',
 'AR',
 'CBLB',
 'HOXB13',
 'FANCL_mut',
 'ZRSR2',
 'RAD51',
 'SBS33',
 'IDH2',
 'TERC',
 'SBS14']

def parse_inputs(age, gender, CNA_events, mutations):
    age = age #TODO check how this is normalized 
    
    gender = 1 if gender == 'male' else -1 

    # string parsing for cna input 
    if len(CNA_events) > 0:
        CNA_events = CNA_events.split('|')
        for i in range(len(CNA_events)):
            CNA_events[i] = CNA_events[i].split()
            CNA_events[i][1] = int(CNA_events[i][1]) # cast val to integer, CNA_events can take on vals -2, -1, 0, 1, 2
    else:
        CNA_events = []

    if len(mutations) > 0:
        mutations = mutations.split('|')
        for i in range(len(mutations)):
            mutations[i] = mutations[i].split(', ')
    else:
        mutations = []

    return age, gender, CNA_events, mutations

import deconstruct_sigs_from_user_input as deconstructSigs

def get_mut_signatures(mutations): 
    mutation_columns = ["UNIQUE_SAMPLE_ID", "CHROMOSOME", "POSITION", "REF_ALLELE", "ALT_ALLELE"]
    if mutations:
        mutation_df = pd.DataFrame(mutations, columns=mutation_columns)
    else:
        mutation_df = pd.DataFrame(columns=mutation_columns)
    file = mutation_df.to_csv('./mutation_input.csv', index=False)

    base_sub_file = deconstructSigs.get_base_substitutions() 
    df_trinuc_feats = pd.read_csv(base_sub_file) 
    mutation_signatures = process_features.obtain_mutation_signatures(df_trinuc_feats)
    return mutation_signatures

def get_top3_min_info(predictions):
    
    result = predictions.iloc[0]
    transposed_row = result.transpose()
    transposed_row = transposed_row.drop('cancer_type')
    transposed_row = transposed_row.drop('max_posterior')
    transposed_row = transposed_row.to_frame()
    transposed_row.columns = ['probability']    
    transposed_row['probability'] = pd.to_numeric(transposed_row['probability'], errors='coerce')   
    top3df = transposed_row.nlargest(3, columns=['probability']) # <---- top 3 cancer predictions and their probabilities 
    top3 = transposed_row.nlargest(3, columns=['probability']).index.tolist() # <---- top 3 cancer predictions and their probabilities
    top3probs = transposed_row.nlargest(3, columns=['probability'])['probability'].tolist()
    
    build = []
    for cancer,prob in zip(top3, top3probs):
        build.append([cancer, prob])
    return build

def top3_str(top3_list):
    build = ''
    for cancer, prob in top3_list:
        build += cancer + ': ' + str(prob) + '\n'
    return build

def get_plot(features, target, probability):
    '''
    features: df containing features (X inputs)
    predictions: xgboost predictions 
    '''

    shaps_cup = utils.obtain_shap_values_with_latest_xgboost(xgb_onconpc, features) # get shap values 
    

    target_idx = cancer_types_to_consider.index(target) # index of cancer type prediction 
    
    # Get SHAP-based explanation for the prediction
    feature_sample_df = features.iloc[0] # find the exact tumor sample we're predicting for 
    shap_pred_cancer_df = pd.DataFrame(shaps_cup[target_idx],
                                       index=features.index,
                                       columns=features.columns)
    shap_pred_sample_df = shap_pred_cancer_df.iloc[0]
    
    # Generate explanation plot
    sample_info = f'Prediction: {target}\nPrediction probability: {probability:.3f}'
    feature_group_to_features_dict = utils.partiton_feature_names_by_group(features.columns)
    fig = utils.get_individual_pred_interpretation(shap_pred_sample_df, feature_sample_df, feature_group_to_features_dict, sample_info=sample_info, filename=f'{target}_plot.png')
    return fig

def get_top3_plots(data, top3_list): 
    plots = []
    for cancer, prob in top3_list:
        plot = get_plot(data, cancer, prob)
        plots.append(plot)
    return plots 

def construct_input_data(age, gender, CNA_events, mutation_signatures):
    data = {}
    data['AGE'] = age #TODO check how this is normalized 
    
    for column in mutation_signatures.columns:
        data[column] = mutation_signatures.iloc[0][column]
    
    for CNA_event in CNA_events:
        CNA, val = CNA_event[0], CNA_event[1]
        data[CNA] = val
        
    for column in all_features:
        if column not in data.keys():
            data[column] = 0

    return data

def get_preds_min_info(age, gender, CNA_events, mutations, output):
    
    age, gender, CNA_events, mutations = parse_inputs(age, gender, CNA_events, mutations)
    global images
    global current_image_index
    global data
    global predictions
    current_image_index = 0

    mutation_signatures = get_mut_signatures(mutations)

    data = pd.DataFrame([construct_input_data(age, gender, CNA_events, mutation_signatures)])    
    predictions = pd.DataFrame(utils.get_xgboost_latest_cancer_type_preds(xgb_onconpc, data, cancer_types_to_consider)) # make predictions 

    shaps_cup = utils.obtain_shap_values_with_latest_xgboost(xgb_onconpc, data) # get shap values 
    top3_pred_list = get_top3_min_info(predictions)

    if output == 'Top Prediction':
        pred_prob = predictions.iloc[0]['max_posterior']
        pred_cancer = predictions.iloc[0]['cancer_type']
        images = [get_plot(data, pred_cancer, pred_prob)]
        selected_image = images[current_image_index]
        return top3_str(top3_pred_list), selected_image

    elif output == 'Top 3 Predictions':
        images = get_top3_plots(data, top3_pred_list)
        selected_image = images[current_image_index]
        return top3_str(top3_pred_list), selected_image

    else:
        images = [get_plot(data, output, predictions.iloc[0][output])]
        selected_image = images[current_image_index]
        return top3_str(top3_pred_list), selected_image